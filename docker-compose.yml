version: '3.9'

x-frontend-common: &frontend-common
    image: registry.gitlab.com/r2devops/frontend:<COMPANY_TAG>

x-jobs-common: &jobs-common
    image: registry.gitlab.com/r2devops/jobs:v1.0.4
    env_file: production.env
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    networks:
      - intranet

services:
  minio:
    image: minio/minio:RELEASE.2022-11-17T23-20-09Z.fips
    restart: unless-stopped
    env_file:
      - production.env
    expose:
      - "9000"
      - "9001"
    volumes:
      - minio-data:/export
      - minio-data_config:/root/.minio
    command: server /export
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=false"
    networks:
      - intranet

  createbucket:
    image: minio/mc
    env_file:
      - production.env
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 $S3_ACCESS_KEY $S3_SECRET_KEY;
      /usr/bin/mc mb myminio/$S3_BUCKET;
      /usr/bin/mc anonymous set public myminio/$S3_BUCKET;
      exit 0;
      "
    labels:
      - "traefik.enable=false"
    networks:
      - intranet

  kratos-migrate:
    image: oryd/kratos:v0.8.2-alpha.1
    volumes:
      - type: volume
        source: kratos-sqlite
        target: /var/lib/sqlite
        read_only: false
      - type: bind
        source: .
        target: /etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    networks:
      - intranet

  kratos:
      depends_on:
        - kratos-migrate
      image: oryd/kratos:v0.8.2-alpha.1
      expose:
        - "4433"
        - "4434"
      restart: unless-stopped
      command: serve -c /etc/config/kratos/kratos.yml --watch-courier
      volumes:
        - type: volume
          source: kratos-sqlite
          target: /var/lib/sqlite
          read_only: false
        - type: bind
          source: .
          target: /etc/config/kratos
      env_file:
        - production.env
      labels:
        - "traefik.http.routers.kratos.rule=Host(\"$KRATOS_URL_WITHOUT_PATH\")&&PathPrefix(\"$KRATOS_PATH\")"
        - "traefik.http.routers.kratos.middlewares=kratos-stripprefix"
        - "traefik.http.middlewares.kratos-stripprefix.stripprefix.prefixes=$KRATOS_PATH"
        - "traefik.http.routers.kratos.entrypoints=websecure"
        - "traefik.http.routers.kratos.tls=true"
        - "traefik.http.routers.kratos.tls.certresolver=le"
      networks:
        - intranet

  jobs:
    <<: *jobs-common
    command: ["/bin/sh", "-c", "sleep 10 && ./app"]
    expose:
      - "80"
    env_file:
      - production.env
    labels:
      - "traefik.http.routers.api.rule=Host(\"$API_URL\")"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=le"

  jobs_worker:
    <<: *jobs-common
    command: ["/bin/sh", "-c", "sleep 15 && ./app --worker"]
    deploy:
      mode: replicated
      replicas: 2
    labels:
      - "traefik.enable=false"

  redis:
    image: redis:6
    restart: unless-stopped
    expose:
      - "6379"
    networks:
      - intranet

  postgres:
    image: postgres:13
    restart: unless-stopped
    env_file:
      - production.env
    expose:
      - "5432"
    networks:
      - intranet
    volumes:
      - postgres-data:/var/lib/postgresql/data

  mailhog:
    image: mailhog/mailhog:latest
    expose:
      - 1025
      - 8025
    networks:
      - intranet

  traefik:
    image: traefik:v2.9
    restart: unless-stopped
    depends_on:
      - frontend
      - jobs
      - kratos
    ports:
      - "80:80"
      - "443:443"
    command:
      - --log.level=DEBUG
      - --accesslog=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --certificatesresolvers.le.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.le.acme.email=$CERTIFICATE_EMAIL
      - --certificatesresolvers.le.acme.storage=/acme/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
    labels:
      - "traefik.enable=false"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=le"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    env_file:
      - production.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-acme:/acme
    networks:
      - intranet

  frontend:
    <<: *frontend-common
    restart: unless-stopped
    env_file:
      - production.env
    expose:
      - "80"
    labels:
      - "traefik.http.routers.front.rule=Host(`${FRONTEND_URL}`)"
      - "traefik.http.routers.front.entrypoints=websecure"
      - "traefik.http.routers.front.tls=true"
      - "traefik.http.routers.front.tls.certresolver=le"
    networks:
      - intranet

networks:
  intranet:

volumes:
  kratos-sqlite:
  minio-data:
  postgres-data:
  minio-data_config:
  traefik-acme:
